swagger: "2.0"
info:
  version: "0.0.1"
  title: Recommendations API
# during dev, should point to your local machine
host: localhost
# basePath prefixes all resource paths 
basePath: /
# 
schemes:
  # tip: remove http to make production-grade
  - http
  - https
# format of bodies a client can send (Content-Type)
consumes:
  - application/json
# format of the responses to the client (Accepts)
produces:
  - application/json
x-a127-config: {}
x-a127-services: {}
paths:
  /customers/{customer_id}/recommendations:
    # binds a127 app logic to a route
    x-swagger-router-controller: recommendations
    x-a127-apply: {}
    get:
      description: Returns personalized customer recommendations.
      # used as the method name of the controller
      operationId: getRecommendations
      parameters:
        - name: customer_id
          in: path
          description: The customer Id to get recommendations for. Use "@me" to leverage customer Id associated assigned to the access token. When no customer Id is associated to the access token a default set of products is returned. With this design we can achieve two purposes, serving apps trusted by the API that have broader access and untrusted apps, which are limited by the customer Id bound to the access token.
          required: true
          type: string
        #- name: type
        #  in: query
        #  description: The type of recommendations to be queried. Only "products" is currently supported, additional support for "departments" will be provided down the road. If no type is given, this resource will use "products" by default.
        #  required: false
        #  type: string
        - name: ql
          in: query
          description: Works similar to a SQL relational database in which you can specify, columns to be included, ordering, and filtering criteria. Since the backend of this API is based on Apigee BaaS, you can apply the same syntax available from this page http://apigee.com/docs/app-services/content/querying-your-app-services-data. If this parameter is not present, by default all entity attributes are returned. Example, /recommendations?ql=select * where productName contains 'BermudaShorts' order by name asc. Query examples in this content are shown URL unencoded to make them easier to read. Keep in mind that you might need to encode query strings if you're sending them as part of URLs, such as when you're executing them with the cURL tool.
          required: false
          type: string
        - name: cursor
          in: query
          description: An encoded representation of the query position pointing to a set of results. To retrieve the next set of results, pass the cursor with your next call for most results. Learn more about this feature here http://apigee.com/docs/app-services/content/working-queries#cursor
          required: false
          type: string
        - name: limit
          in: query
          description: limit results returned. Default first 10 elements.
          required: false
          type: integer
      responses:
        "200":
          description: Success
          schema:
            # a pointer to a definition
            $ref: "#/definitions/RecommendationsResponse"
        # responses may fall through to errors
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
# complex objects have schema definitions
definitions:
  RecommendationsResponse:
    type: object
    properties:
      entities:
        type: array
        description: represents a collection of recommended products associated for a specific customer
        items:
          type: object
          properties:
            type:
              type: string
              description: this can be removed, since this is internal to BaaS
            created:
              type: number
              description: this can be removed, since this is internal to BaaS
            modified:
              type: number
              description: this can be removed, since this is internal to BaaS
            productName:
              type: string
            scoreType:
              type: string
            scoreValue:
              type: number
            status:
              type: string
            userId:
              type: string
            category:
              type: string
            CatName:
              type: string
            description:
              type: string
            discount:
              type: number
            partNo:
              type: string
            photos:
              type: array
              items:
                type: object
                description: URL collection of photos
                properties:
                  photo:
                    type: string
                    description: URL photo
            price:
              type: number
            productName2:
              type: string
            rating:
              type: number
            metadata/connecting/products:
              type: string
            metadata/path:
              type: string
      cursor:
        type: string
      count:
        type: string
      duration:
        type: string
  ErrorResponse:
    required:
      - message
    properties:
      message:
        type: string
      code:
        type: number
        format: int32